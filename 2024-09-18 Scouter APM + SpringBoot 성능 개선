블로그 서버를 구현하면서 비효율적인 요청이 발생한 것을 확인했다.

해당 요청은 내가 블로그 글을 포스팅할 때 발생한 것으로, 
무려 1,393ms(약 1.4초)가 걸렸다. 사실 이 부분은 개발 중에도 불편함을 느꼈던 부분이다. 
이러한 문제는 회사에서 실제 코드를 작성하고 운영할 때도 종종 나타나지만, 
모른 척 넘어가는 경우가 많았다..
이 요청을 분석하고 개선해보자.



► txid    = z1j6sgl56m57cb
► gxid    = z1j6sgl56m57cb <<- click to open XLog flow map
► objName = /host-agent/mo-blog
► thread  = http-nio-8080-exec-3
► endtime = 20240911 23:02:22.301
► elapsed = 1,393 ms
► service = /v1/blogs
► cpu=0 ms, kbytes=0
► sqlCount=3, sqlTime=11 ms
► ApiCallCount=2, ApiCallTime=866 ms
► userAgent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36
► referer=https://mo-greene.pro/write
► group=/v1
► profileCount=52
► profileSize=1011
------------------------------------------------------------------------------------------
    p#      #    	  TIME         T-GAP   CPU          CONTENTS
------------------------------------------------------------------------------------------
         [******] 23:02:20.908        0      0  start transaction 
    -    [000000] 23:02:20.908        0      0  [driving thread] http-nio-8080-exec-3

...

[000011] [000038] 23:02:21.612        0      0     x1nvs5j6 [674ms] -- x1nvs5j6
[000038] [000039] 23:02:21.612        0      0      CreateContentBodyRequest#builder() [2ms] -- com.mo.mlog.common.feign.github.dto.CreateContentBodyRequest.builder()Lcom/mo/mlog/common/feign/github/dto/CreateContentBodyRequest$CreateContentBodyRequestBuilder;
[000038] [000040] 23:02:21.614        2      0      CreateContentBodyRequest$CreateContentBodyRequestBuilder#message() [0ms] -- com.mo.mlog.common.feign.github.dto.CreateContentBodyRequest$CreateContentBodyRequestBuilder.message(Ljava/lang/String;)Lcom/mo/mlog/common/feign/github/dto/CreateContentBodyRequest$CreateContentBodyRequestBuilder;
[000038] [000041] 23:02:21.614        0      0      CreateContentBodyRequest$CreateContentBodyRequestBuilder#content() [0ms] -- com.mo.mlog.common.feign.github.dto.CreateContentBodyRequest$CreateContentBodyRequestBuilder.content(Ljava/lang/String;)Lcom/mo/mlog/common/feign/github/dto/CreateContentBodyRequest$CreateContentBodyRequestBuilder;
[000038] [000042] 23:02:21.614        0      0      CreateContentBodyRequest$CreateContentBodyRequestBuilder#build() [2ms] -- com.mo.mlog.common.feign.github.dto.CreateContentBodyRequest$CreateContentBodyRequestBuilder.build()Lcom/mo/mlog/common/feign/github/dto/CreateContentBodyRequest;
[000042] [000043] 23:02:21.614        0      0       DateUtil#dateTimeFormat() [0ms] -- com.mo.mlog.common.util.DateUtil.dateTimeFormat(Ljava/time/LocalDateTime;)Ljava/lang/String;
[000038] [000044] 23:02:21.625       11      0      socket: 20.200.245.245:443 6 ms
[000038] [000045] 23:02:21.659       34      0      call: /repos/Mo-Greene/blogmd/contents/2024-09-11%20Scouter%20APM%20%EC%8B%A4%EC%84%9C%EB%B2%84%20%EC%A0%81%EC%9A%A9%EA%B8%B0 625 ms [api.github.com:-1] <z5j5pol4q4ebqg>
[000007] [000046] 23:02:22.297      638      0    COMMIT [2ms] -- COMMIT
[000007] [000047] 23:02:22.299        2      0    setAutoCommit(true) [0ms] -- setAutoCommit(true)
[000006] [000048] 23:02:22.299        0      0   CommonResponse#ok() [0ms] -- com.mo.mlog.common.response.CommonResponse.ok()Lcom/mo/mlog/common/response/CommonResponse;
    -    [000049] 23:02:22.300        1      0  CommonResponse#result() [0ms] -- com.mo.mlog.common.response.CommonResponse.result()Lcom/mo/mlog/common/response/CommonResponse$Result;
    -    [000050] 23:02:22.300        0      0  CommonResponse#data() [0ms] -- com.mo.mlog.common.response.CommonResponse.data()Ljava/lang/Object;
    -    [000051] 23:02:22.300        0      0  CLOSE [0ms] -- CLOSE
         [******] 23:02:22.301        1      0  end of transaction 
------------------------------------------------------------------------------------------

차마 이 xLog를 제대로 봐 달라고 할 수 없을 정도의 가독성이다 ㅠㅠ
총 1393ms가 소요되었다.
해당 코드는 필수로 분석하고 해결해야 된다.
현재는 나만 쓸 수 있는 게시판에 불과하지만 사용자가 많아질 경우 서버 사양과 상황에 따라 그 이상의 시간이 걸릴 수 있고 심하다면 서버가 터지는 경우도 생길 수 있다.


문제 분석
T-GAP은 각 이벤트 간의 시간 간격(Time Gap)이다.
즉, 로그 항목 간에 경과 된 시간을 나타내며, 작업이 완료되기 까지 걸린 시간을 추적할 할 때 사용된다.
나름대로 정상적인 시간이 나오고 있지만 마지막 로그로 확인해보면 638ms가 걸리는 이벤트가 되었다.
이 이벤트는 x1nvs5j6 이벤트로 github api 를 호출하는 부분에서 638ms가 소요되었다.
코드를 확인해보자.
//게시글 등록
@Transactional
public void savePost(PostRequest request) {

    // 1.
    Tag tag = tagRepository
        .findById(request.tagId()).orElseThrow(EntityException::new);

    // 2.
    String thumbnail = null;
    if (request.thumbnail() != null && !request.thumbnail().isEmpty()) {
        MultipartFile file = request.thumbnail();
        thumbnail = uploadFile(file);
    }

    // 3.
    Post post = Post.builder()
        .title(request.title())
        .content(request.content())
        .plainContent(request.plainContent())
        .preview(previewText(request.plainContent()))
        .tag(tag)
        .thumbnail(thumbnail)
        .build();
    postRepository.save(post);

    // 4.
    githubUtil.commitGithub(request.title(), request.content());
}

해당 로직은 다음과 같다.

게시글의 tagId를 조회해 Tag 객체를 가져온다.
썸네일이 첨부된 경우 S3에 업로드하고, 없으면 null로 처리한다.
게시글 정보를 DB에 저장한다.
DB에 게시글을 저장한 후, github api를 이용해 제목과 내용을 레포지토리에 푸시한다.

githubUtil의 commitGithub를 보자면
// github api
@Component  
@RequiredArgsConstructor  
public class GithubUtil {  
  
    private final GithubFeign githubFeign;  
  
    @Value("${github.owner}")  
    private String owner;  
  
    @Value("${github.token}")  
    private String token;  
  
    @Value("${github.repo}")  
    private String repo;  
  
    private static final String ACCEPT = "application/vnd.github+json";  
    private static final String API_VERSION = "2022-11-28";  
  
    /**  
     * 블로그 게시글 깃허브 커밋  
     *  
     * @param title   제목  
     * @param content 내용  
     */  
    public void commitGithub(String title, String content) {  
  
       CreateContentBodyRequest request = CreateContentBodyRequest.builder()  
          .message(title)  
          .content(content)  
          .build();  
  
       String authorization = "Bearer " + token;  
       String path = LocalDate.now() + " " + title;  
  
       githubFeign.createContent(  
          ACCEPT, authorization, API_VERSION, owner, repo, path, request  
       );  
    }  
}

// 외부 api 호출 feign client
@PutMapping("/repos/{owner}/{repo}/contents/{path}")  
Response createContent(@RequestHeader("Accept") String acceptHeader,  
                    @RequestHeader("Authorization") String authorizationHeader,  
                    @RequestHeader("X-GitHub-Api-Version") String apiVersion,  
                    @PathVariable("owner") String owner,  
                    @PathVariable("repo") String repo,  
                    @PathVariable("path") String path,  
                    @RequestBody CreateContentBodyRequest request);  
}

즉, 내가 다른 블로그들을 접하면서 아쉬웠던
블로그 업로드와 github 잔디밭 두 마리의 토끼를 다 잡기 위한 코드를 만들어 두었다.
하지만 해당 코드에서 
githubUtil.commitGithub(request.title(), request.content());
이 부분에서 속도가 638ms가 걸려버린 것이다.


해결 과정 : 비동기 처리 도입
비동기로 github api 를 별도의 쓰레드로 처리해보자는 생각을 하게 되었다.
//AsyncConfig
@Slf4j  
@EnableAsync  
@Configuration  
public class AsyncConfig implements AsyncConfigurer {  
  
    /**  
     * 비동기 설정  
     * <p>최대 스레드 수 3</p>  
     */    @Override  
    @Bean(name = "taskExecutor")  
    public Executor getAsyncExecutor() {  
       ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();  
       executor.setCorePoolSize(1);  
       executor.setMaxPoolSize(3);  
       executor.setQueueCapacity(5);  
       executor.setThreadNamePrefix("Async-");  
       executor.initialize();  
       return executor;  
    }  
  
    @Override  
    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {  
       return new CustomAsyncExceptionHandler();  
    }  
  
    private static class CustomAsyncExceptionHandler implements AsyncUncaughtExceptionHandler {  
  
       @Override  
       public void handleUncaughtException(Throwable ex, Method method, Object... params) {  
          log.error("Async Method '{}' : {}", method.getName(), ex.getMessage());  
          log.error("Error : ", ex);  
       }  
    }  
}

단순히 @EnableAsync 를 붙여서 사용할 수 있겠지만
스프링부트 3.1 버전 부터 AsyncConfigurer 를 주입받아 내부 메서드를 구현했다.

기본적으로 Spring에서는 @Async 어노테이션을 붙이고 사용하게 되면 기본설정인
SimpleAsyncTaskExecutor 를 사용한다.
이는 매 비동기 작업마다 새로운 쓰레드를 생성하게 된다.
쓰레드를 매번 사용할 때마다 생성하게 된다는 얘기는 쓰레드풀을 사용하지 않기 때문에
혹시나 많은 요청이 생길 경우 OutOfMemoryError(OOM)이 발생할 가능성이 높아진다.
특히, 서버사양이 t3.micro 인 내 was는 조금만 트래픽이 몰리면 서버가 터질 가능성이 높아질 것이다.
그래서 ThreadPoolTaskExecutor 를 사용해 적절한 스레드풀 크기를 설정함으로써, 
서버 자원 과부하를 방지할 수 있다.
ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();  
       executor.setCorePoolSize(1);  
       executor.setMaxPoolSize(3);  
       executor.setQueueCapacity(5);  
       executor.setThreadNamePrefix("Async-");  
       executor.initialize();  
       return executor;  


CorePoolSize : 최소한으로 유지되는 쓰레드 수
MaxPoolSize : 동시에 실행되는 최대 쓰레드 수
QueueCapacity : 실행 중인 쓰레드가 전부 동작하며 추가 작업이 생길 경우 대기 수

내가 생각한 게시글 등록은 기본적으로

나만 사용할 수 있다.(권한 체크로 막아둠)
그러므로 쉽게 쓰레드의 예상 사용 수를 추측할 수 있다.

위 두가지의 이유로 낮은 쓰레드풀을 만들어 주었다.
이제 코드를 비동기로 동작하도록 수정해보자.



BlogService


@Service  
@RequiredArgsConstructor  
public class BlogService {  

    ...

    private final BlogAsync blogAsync;  

    ...
  
    /**  
     * 게시글 저장  
     *  
     * @param request 게시글 저장  
     */  
    @Transactional  
    public void savePost(PostRequest request) {  
        try {  
           //깃헙 개인 리포 commit       
           blogAsync.commitGithub(request.title(), request.plainContent());  
  
           Tag tag = tagRepository
               .findById(request.tagId()).orElseThrow(EntityException::new);  
  
           String thumbnail = null;  
           if (request.thumbnail() != null && !request.thumbnail().isEmpty()) {  
              MultipartFile file = request.thumbnail();  
              thumbnail = BUCKET_THUMBNAIL + UUID.randomUUID();  
              blogAsync.uploadFile(thumbnail, file);  
           }  
  
           var post = Post.toPostEntity(request, tag, thumbnail);  
           postRepository.save(post);  
  
        } catch (Exception e) {  
           throw new RuntimeException(e.getMessage());  
        }  
}

    ...
    
}




BlogAsync


@Slf4j  
@Component  
@RequiredArgsConstructor  
public class BlogAsync {  
  
    private final AmazonS3Client amazonS3Client;  
    private final GithubUtil githubUtil;  
  
    @Value("${cloud.aws.s3.bucket}")  
    private String bucket;  
  
    /**  
     * 썸네일 파일 업로드  
     *  
     * @param file 썸네일 파일  
     */  
    @Async  
    public void uploadFile(String objectName, MultipartFile file) {  
  
       ObjectMetadata objectMetadata = new ObjectMetadata();  
       objectMetadata.setContentLength(file.getSize());  
       objectMetadata.setContentType(file.getContentType());  
  
       try {  
          amazonS3Client.putObject(  
             new PutObjectRequest(bucket, objectName, file.getInputStream(), objectMetadata)  
          );  
       } catch (IOException e) {  
          throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "파일 업로드 실패");  
       }  
    }  
  
    /**  
     * 깃헙 커밋  
     *  
     * @param title   글 제목  
     * @param content 글 내용  
     */  
    @Async  
    public void commitGithub(String title, String content) {  
       try {  
          githubUtil.commitGithub(title, content);  
       } catch (Exception e) {  
          log.error("github commit failed : {}", e.getMessage());  
       }  
    }  
}

savePost 메서드에서 외부 api를 호출하는 (AWS S3, Github) 부분을 비동기로 동작하게 만들어 주었고 간단히 테스트 코드도 만들었다.
@Test  
@DisplayName("게시글 저장 테스트")  
void savePost_withCallAsyncAndSavePost() {  
    //given  
    PostRequest request = new PostRequest(  
       "Sample Title",  
       "Sample Content",  
       "Sample Plain Content",  
       1L,  
       thumbnailMock  
    );  
  
    Tag mockTag = new Tag("Sample Tag");  
    when(tagRepository.findById(1L)).thenReturn(Optional.of(mockTag));  
    when(thumbnailMock.isEmpty()).thenReturn(false);  
    doNothing().when(blogAsync).commitGithub(anyString(), anyString());  
  
    //when  
    blogService.savePost(request);  
  
    //then  
    verify(blogAsync, times(1)).commitGithub("Sample Title", "Sample Plain Content");  
    verify(postRepository, times(1)).save(postCaptor.capture());  
    Post savedPost = postCaptor.getValue();  
  
    assertNotNull(savedPost);  
    assertEquals("Sample Title", savedPost.getTitle());  
    assertEquals("Sample Content", savedPost.getContent());  
    assertEquals("Sample Plain Content", savedPost.getPlainContent());  
    assertEquals(mockTag, savedPost.getTag());  
}


...?
생각해보니 Mock 테스트코드로 만들어뒀으면 시간을 체크할 수가 없었다.
외부 api를 호출하는게 아닌 가짜 객체를 만들어서 응답하는 것이다 보니
응답시간이 의미가 없기 때문이다.
자 이제 mock테스트로 동작이 제대로 되는지는 확인하였고 실제로 성능이 개선되었는지 확인해보려한다.
